// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `transaction.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct address {
    // message fields
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a address {
    fn default() -> &'a address {
        <address as ::protobuf::Message>::default_instance()
    }
}

impl address {
    pub fn new() -> address {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for address {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> address {
        address::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &address| { &m.address },
                |m: &mut address| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<address>(
                "address",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static address {
        static instance: ::protobuf::rt::LazyV2<address> = ::protobuf::rt::LazyV2::INIT;
        instance.get(address::new)
    }
}

impl ::protobuf::Clear for address {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for address {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct amount {
    // message fields
    pub amount: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a amount {
    fn default() -> &'a amount {
        <amount as ::protobuf::Message>::default_instance()
    }
}

impl amount {
    pub fn new() -> amount {
        ::std::default::Default::default()
    }

    // string amount = 1;


    pub fn get_amount(&self) -> &str {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::string::String) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::string::String {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.amount, ::std::string::String::new())
    }
}

impl ::protobuf::Message for amount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.amount)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.amount.is_empty() {
            os.write_string(1, &self.amount)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> amount {
        amount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "amount",
                |m: &amount| { &m.amount },
                |m: &mut amount| { &mut m.amount },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<amount>(
                "amount",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static amount {
        static instance: ::protobuf::rt::LazyV2<amount> = ::protobuf::rt::LazyV2::INIT;
        instance.get(amount::new)
    }
}

impl ::protobuf::Clear for amount {
    fn clear(&mut self) {
        self.amount.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for amount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for amount {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct tx {
    // message fields
    pub sender: ::protobuf::SingularPtrField<address>,
    pub recipient: ::protobuf::SingularPtrField<address>,
    pub amount: ::protobuf::SingularPtrField<amount>,
    pub sequeue: ::std::string::String,
    pub input: ::std::vec::Vec<u8>,
    pub sign: ::std::vec::Vec<u8>,
    pub publick_key: ::std::vec::Vec<u8>,
    pub time_stamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a tx {
    fn default() -> &'a tx {
        <tx as ::protobuf::Message>::default_instance()
    }
}

impl tx {
    pub fn new() -> tx {
        ::std::default::Default::default()
    }

    // .address sender = 1;


    pub fn get_sender(&self) -> &address {
        self.sender.as_ref().unwrap_or_else(|| <address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    pub fn has_sender(&self) -> bool {
        self.sender.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: address) {
        self.sender = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut address {
        if self.sender.is_none() {
            self.sender.set_default();
        }
        self.sender.as_mut().unwrap()
    }

    // Take field
    pub fn take_sender(&mut self) -> address {
        self.sender.take().unwrap_or_else(|| address::new())
    }

    // .address recipient = 2;


    pub fn get_recipient(&self) -> &address {
        self.recipient.as_ref().unwrap_or_else(|| <address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_recipient(&mut self) {
        self.recipient.clear();
    }

    pub fn has_recipient(&self) -> bool {
        self.recipient.is_some()
    }

    // Param is passed by value, moved
    pub fn set_recipient(&mut self, v: address) {
        self.recipient = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recipient(&mut self) -> &mut address {
        if self.recipient.is_none() {
            self.recipient.set_default();
        }
        self.recipient.as_mut().unwrap()
    }

    // Take field
    pub fn take_recipient(&mut self) -> address {
        self.recipient.take().unwrap_or_else(|| address::new())
    }

    // .amount amount = 3;


    pub fn get_amount(&self) -> &amount {
        self.amount.as_ref().unwrap_or_else(|| <amount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    pub fn has_amount(&self) -> bool {
        self.amount.is_some()
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: amount) {
        self.amount = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut amount {
        if self.amount.is_none() {
            self.amount.set_default();
        }
        self.amount.as_mut().unwrap()
    }

    // Take field
    pub fn take_amount(&mut self) -> amount {
        self.amount.take().unwrap_or_else(|| amount::new())
    }

    // string sequeue = 4;


    pub fn get_sequeue(&self) -> &str {
        &self.sequeue
    }
    pub fn clear_sequeue(&mut self) {
        self.sequeue.clear();
    }

    // Param is passed by value, moved
    pub fn set_sequeue(&mut self, v: ::std::string::String) {
        self.sequeue = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sequeue(&mut self) -> &mut ::std::string::String {
        &mut self.sequeue
    }

    // Take field
    pub fn take_sequeue(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sequeue, ::std::string::String::new())
    }

    // bytes input = 5;


    pub fn get_input(&self) -> &[u8] {
        &self.input
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: ::std::vec::Vec<u8>) {
        self.input = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.input
    }

    // Take field
    pub fn take_input(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.input, ::std::vec::Vec::new())
    }

    // bytes sign = 6;


    pub fn get_sign(&self) -> &[u8] {
        &self.sign
    }
    pub fn clear_sign(&mut self) {
        self.sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sign
    }

    // Take field
    pub fn take_sign(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sign, ::std::vec::Vec::new())
    }

    // bytes publick_key = 7;


    pub fn get_publick_key(&self) -> &[u8] {
        &self.publick_key
    }
    pub fn clear_publick_key(&mut self) {
        self.publick_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_publick_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.publick_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publick_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.publick_key
    }

    // Take field
    pub fn take_publick_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.publick_key, ::std::vec::Vec::new())
    }

    // uint64 time_stamp = 8;


    pub fn get_time_stamp(&self) -> u64 {
        self.time_stamp
    }
    pub fn clear_time_stamp(&mut self) {
        self.time_stamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_stamp(&mut self, v: u64) {
        self.time_stamp = v;
    }
}

impl ::protobuf::Message for tx {
    fn is_initialized(&self) -> bool {
        for v in &self.sender {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.recipient {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.amount {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sender)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.recipient)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.amount)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sequeue)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.input)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sign)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.publick_key)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_stamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sender.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.recipient.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.amount.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.sequeue.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.sequeue);
        }
        if !self.input.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.input);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.sign);
        }
        if !self.publick_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.publick_key);
        }
        if self.time_stamp != 0 {
            my_size += ::protobuf::rt::value_size(8, self.time_stamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sender.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.recipient.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.amount.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.sequeue.is_empty() {
            os.write_string(4, &self.sequeue)?;
        }
        if !self.input.is_empty() {
            os.write_bytes(5, &self.input)?;
        }
        if !self.sign.is_empty() {
            os.write_bytes(6, &self.sign)?;
        }
        if !self.publick_key.is_empty() {
            os.write_bytes(7, &self.publick_key)?;
        }
        if self.time_stamp != 0 {
            os.write_uint64(8, self.time_stamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> tx {
        tx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<address>>(
                "sender",
                |m: &tx| { &m.sender },
                |m: &mut tx| { &mut m.sender },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<address>>(
                "recipient",
                |m: &tx| { &m.recipient },
                |m: &mut tx| { &mut m.recipient },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<amount>>(
                "amount",
                |m: &tx| { &m.amount },
                |m: &mut tx| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sequeue",
                |m: &tx| { &m.sequeue },
                |m: &mut tx| { &mut m.sequeue },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "input",
                |m: &tx| { &m.input },
                |m: &mut tx| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sign",
                |m: &tx| { &m.sign },
                |m: &mut tx| { &mut m.sign },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "publick_key",
                |m: &tx| { &m.publick_key },
                |m: &mut tx| { &mut m.publick_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "time_stamp",
                |m: &tx| { &m.time_stamp },
                |m: &mut tx| { &mut m.time_stamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<tx>(
                "tx",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static tx {
        static instance: ::protobuf::rt::LazyV2<tx> = ::protobuf::rt::LazyV2::INIT;
        instance.get(tx::new)
    }
}

impl ::protobuf::Clear for tx {
    fn clear(&mut self) {
        self.sender.clear();
        self.recipient.clear();
        self.amount.clear();
        self.sequeue.clear();
        self.input.clear();
        self.sign.clear();
        self.publick_key.clear();
        self.time_stamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for tx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for tx {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct txs {
    // message fields
    pub tansactions: ::protobuf::RepeatedField<tx>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a txs {
    fn default() -> &'a txs {
        <txs as ::protobuf::Message>::default_instance()
    }
}

impl txs {
    pub fn new() -> txs {
        ::std::default::Default::default()
    }

    // repeated .tx tansactions = 1;


    pub fn get_tansactions(&self) -> &[tx] {
        &self.tansactions
    }
    pub fn clear_tansactions(&mut self) {
        self.tansactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_tansactions(&mut self, v: ::protobuf::RepeatedField<tx>) {
        self.tansactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tansactions(&mut self) -> &mut ::protobuf::RepeatedField<tx> {
        &mut self.tansactions
    }

    // Take field
    pub fn take_tansactions(&mut self) -> ::protobuf::RepeatedField<tx> {
        ::std::mem::replace(&mut self.tansactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for txs {
    fn is_initialized(&self) -> bool {
        for v in &self.tansactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tansactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tansactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tansactions {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> txs {
        txs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<tx>>(
                "tansactions",
                |m: &txs| { &m.tansactions },
                |m: &mut txs| { &mut m.tansactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<txs>(
                "txs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static txs {
        static instance: ::protobuf::rt::LazyV2<txs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(txs::new)
    }
}

impl ::protobuf::Clear for txs {
    fn clear(&mut self) {
        self.tansactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for txs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for txs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct txReceipt {
    // message fields
    pub status: i32,
    pub tx_id: ::std::vec::Vec<u8>,
    pub sign: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a txReceipt {
    fn default() -> &'a txReceipt {
        <txReceipt as ::protobuf::Message>::default_instance()
    }
}

impl txReceipt {
    pub fn new() -> txReceipt {
        ::std::default::Default::default()
    }

    // int32 status = 1;


    pub fn get_status(&self) -> i32 {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = 0;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: i32) {
        self.status = v;
    }

    // bytes tx_id = 6;


    pub fn get_tx_id(&self) -> &[u8] {
        &self.tx_id
    }
    pub fn clear_tx_id(&mut self) {
        self.tx_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_id
    }

    // Take field
    pub fn take_tx_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_id, ::std::vec::Vec::new())
    }

    // bytes sign = 7;


    pub fn get_sign(&self) -> &[u8] {
        &self.sign
    }
    pub fn clear_sign(&mut self) {
        self.sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sign
    }

    // Take field
    pub fn take_sign(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sign, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for txReceipt {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.status = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_id)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sign)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != 0 {
            my_size += ::protobuf::rt::value_size(1, self.status, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tx_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.tx_id);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.sign);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != 0 {
            os.write_int32(1, self.status)?;
        }
        if !self.tx_id.is_empty() {
            os.write_bytes(6, &self.tx_id)?;
        }
        if !self.sign.is_empty() {
            os.write_bytes(7, &self.sign)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> txReceipt {
        txReceipt::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "status",
                |m: &txReceipt| { &m.status },
                |m: &mut txReceipt| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_id",
                |m: &txReceipt| { &m.tx_id },
                |m: &mut txReceipt| { &mut m.tx_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sign",
                |m: &txReceipt| { &m.sign },
                |m: &mut txReceipt| { &mut m.sign },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<txReceipt>(
                "txReceipt",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static txReceipt {
        static instance: ::protobuf::rt::LazyV2<txReceipt> = ::protobuf::rt::LazyV2::INIT;
        instance.get(txReceipt::new)
    }
}

impl ::protobuf::Clear for txReceipt {
    fn clear(&mut self) {
        self.status = 0;
        self.tx_id.clear();
        self.sign.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for txReceipt {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for txReceipt {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct txReceipts {
    // message fields
    pub tansaction_receipts: ::protobuf::RepeatedField<txReceipt>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a txReceipts {
    fn default() -> &'a txReceipts {
        <txReceipts as ::protobuf::Message>::default_instance()
    }
}

impl txReceipts {
    pub fn new() -> txReceipts {
        ::std::default::Default::default()
    }

    // repeated .txReceipt tansaction_receipts = 1;


    pub fn get_tansaction_receipts(&self) -> &[txReceipt] {
        &self.tansaction_receipts
    }
    pub fn clear_tansaction_receipts(&mut self) {
        self.tansaction_receipts.clear();
    }

    // Param is passed by value, moved
    pub fn set_tansaction_receipts(&mut self, v: ::protobuf::RepeatedField<txReceipt>) {
        self.tansaction_receipts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tansaction_receipts(&mut self) -> &mut ::protobuf::RepeatedField<txReceipt> {
        &mut self.tansaction_receipts
    }

    // Take field
    pub fn take_tansaction_receipts(&mut self) -> ::protobuf::RepeatedField<txReceipt> {
        ::std::mem::replace(&mut self.tansaction_receipts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for txReceipts {
    fn is_initialized(&self) -> bool {
        for v in &self.tansaction_receipts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tansaction_receipts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tansaction_receipts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tansaction_receipts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> txReceipts {
        txReceipts::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<txReceipt>>(
                "tansaction_receipts",
                |m: &txReceipts| { &m.tansaction_receipts },
                |m: &mut txReceipts| { &mut m.tansaction_receipts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<txReceipts>(
                "txReceipts",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static txReceipts {
        static instance: ::protobuf::rt::LazyV2<txReceipts> = ::protobuf::rt::LazyV2::INIT;
        instance.get(txReceipts::new)
    }
}

impl ::protobuf::Clear for txReceipts {
    fn clear(&mut self) {
        self.tansaction_receipts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for txReceipts {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for txReceipts {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11transaction.proto\"#\n\x07address\x12\x18\n\x07address\x18\x01\x20\
    \x01(\tR\x07address\"\x20\n\x06amount\x12\x16\n\x06amount\x18\x01\x20\
    \x01(\tR\x06amount\"\xf3\x01\n\x02tx\x12\x20\n\x06sender\x18\x01\x20\x01\
    (\x0b2\x08.addressR\x06sender\x12&\n\trecipient\x18\x02\x20\x01(\x0b2\
    \x08.addressR\trecipient\x12\x1f\n\x06amount\x18\x03\x20\x01(\x0b2\x07.a\
    mountR\x06amount\x12\x18\n\x07sequeue\x18\x04\x20\x01(\tR\x07sequeue\x12\
    \x14\n\x05input\x18\x05\x20\x01(\x0cR\x05input\x12\x12\n\x04sign\x18\x06\
    \x20\x01(\x0cR\x04sign\x12\x1f\n\x0bpublick_key\x18\x07\x20\x01(\x0cR\np\
    ublickKey\x12\x1d\n\ntime_stamp\x18\x08\x20\x01(\x04R\ttimeStamp\",\n\
    \x03txs\x12%\n\x0btansactions\x18\x01\x20\x03(\x0b2\x03.txR\x0btansactio\
    ns\"L\n\ttxReceipt\x12\x16\n\x06status\x18\x01\x20\x01(\x05R\x06status\
    \x12\x13\n\x05tx_id\x18\x06\x20\x01(\x0cR\x04txId\x12\x12\n\x04sign\x18\
    \x07\x20\x01(\x0cR\x04sign\"I\n\ntxReceipts\x12;\n\x13tansaction_receipt\
    s\x18\x01\x20\x03(\x0b2\n.txReceiptR\x12tansactionReceiptsB\x13\n\x05mod\
    elP\x01Z\x08./;modelJ\xf9\t\n\x06\x12\x04\0\0%\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\n\x12\x03\x02\
    \0\"\n\x08\n\x01\x08\x12\x03\x03\0\x1e\n\t\n\x02\x08\x01\x12\x03\x03\0\
    \x1e\n\x08\n\x01\x08\x12\x03\x04\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x04\0\
    \x1f\n\n\n\x02\x04\0\x12\x04\x06\0\x08\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x06\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x07\x04\x17\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x07\x04\x06\x11\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x07\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x0b\x12\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x07\x15\x16\n\n\n\x02\x04\x01\x12\x04\n\0\x0c\
    \x01\n\n\n\x03\x04\x01\x01\x12\x03\n\x08\x0e\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03\x0b\x04\x16\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0b\x04\n\x10\n\
    \x0c\n\x05\x04\x01\x02\0\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\x01\x02\0\
    \x01\x12\x03\x0b\x0b\x11\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0b\x14\
    \x15\n\n\n\x02\x04\x02\x12\x04\x0e\0\x17\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03\x0e\x08\n\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0f\x04\x17\n\r\n\x05\
    \x04\x02\x02\0\x04\x12\x04\x0f\x04\x0e\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\
    \x12\x03\x0f\x04\x0b\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0f\x0c\x12\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0f\x15\x16\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03\x10\x04\x1a\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x10\x04\
    \x0f\x17\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x10\x04\x0b\n\x0c\n\x05\
    \x04\x02\x02\x01\x01\x12\x03\x10\x0c\x15\n\x0c\n\x05\x04\x02\x02\x01\x03\
    \x12\x03\x10\x18\x19\n\x0b\n\x04\x04\x02\x02\x02\x12\x03\x11\x04\x16\n\r\
    \n\x05\x04\x02\x02\x02\x04\x12\x04\x11\x04\x10\x1a\n\x0c\n\x05\x04\x02\
    \x02\x02\x06\x12\x03\x11\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\
    \x11\x0b\x11\n\x0c\n\x05\x04\x02\x02\x02\x03\x12\x03\x11\x14\x15\n\x0b\n\
    \x04\x04\x02\x02\x03\x12\x03\x12\x04\x17\n\r\n\x05\x04\x02\x02\x03\x04\
    \x12\x04\x12\x04\x11\x16\n\x0c\n\x05\x04\x02\x02\x03\x05\x12\x03\x12\x04\
    \n\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\x12\x0b\x12\n\x0c\n\x05\x04\
    \x02\x02\x03\x03\x12\x03\x12\x15\x16\n\x0b\n\x04\x04\x02\x02\x04\x12\x03\
    \x13\x04\x14\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04\x13\x04\x12\x17\n\x0c\
    \n\x05\x04\x02\x02\x04\x05\x12\x03\x13\x04\t\n\x0c\n\x05\x04\x02\x02\x04\
    \x01\x12\x03\x13\n\x0f\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x13\x12\
    \x13\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x14\x04\x13\n\r\n\x05\x04\x02\
    \x02\x05\x04\x12\x04\x14\x04\x13\x14\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\
    \x03\x14\x04\t\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x14\n\x0e\n\x0c\n\
    \x05\x04\x02\x02\x05\x03\x12\x03\x14\x11\x12\n\x0b\n\x04\x04\x02\x02\x06\
    \x12\x03\x15\x04\x1a\n\r\n\x05\x04\x02\x02\x06\x04\x12\x04\x15\x04\x14\
    \x13\n\x0c\n\x05\x04\x02\x02\x06\x05\x12\x03\x15\x04\t\n\x0c\n\x05\x04\
    \x02\x02\x06\x01\x12\x03\x15\n\x15\n\x0c\n\x05\x04\x02\x02\x06\x03\x12\
    \x03\x15\x18\x19\n\x0b\n\x04\x04\x02\x02\x07\x12\x03\x16\x04\x1a\n\r\n\
    \x05\x04\x02\x02\x07\x04\x12\x04\x16\x04\x15\x1a\n\x0c\n\x05\x04\x02\x02\
    \x07\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x02\x02\x07\x01\x12\x03\x16\
    \x0b\x15\n\x0c\n\x05\x04\x02\x02\x07\x03\x12\x03\x16\x18\x19\n\n\n\x02\
    \x04\x03\x12\x04\x19\0\x1b\x01\n\n\n\x03\x04\x03\x01\x12\x03\x19\x08\x0b\
    \n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1a\x04\x20\n\x0c\n\x05\x04\x03\x02\0\
    \x04\x12\x03\x1a\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1a\r\x0f\
    \n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1a\x10\x1b\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03\x1a\x1e\x1f\n\n\n\x02\x04\x04\x12\x04\x1d\0!\x01\n\n\
    \n\x03\x04\x04\x01\x12\x03\x1d\x08\x11\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    \x1e\x04\x15\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1e\x04\x1d\x13\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x03\x1e\x04\t\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03\x1e\n\x10\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1e\x13\x14\n\
    \x0b\n\x04\x04\x04\x02\x01\x12\x03\x1f\x04\x14\n\r\n\x05\x04\x04\x02\x01\
    \x04\x12\x04\x1f\x04\x1e\x15\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\x1f\
    \x04\t\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1f\n\x0f\n\x0c\n\x05\x04\
    \x04\x02\x01\x03\x12\x03\x1f\x12\x13\n\x0b\n\x04\x04\x04\x02\x02\x12\x03\
    \x20\x04\x13\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04\x20\x04\x1f\x14\n\x0c\
    \n\x05\x04\x04\x02\x02\x05\x12\x03\x20\x04\t\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03\x20\n\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03\x20\x11\
    \x12\n\n\n\x02\x04\x05\x12\x04#\0%\x01\n\n\n\x03\x04\x05\x01\x12\x03#\
    \x08\x12\n\x0b\n\x04\x04\x05\x02\0\x12\x03$\x04/\n\x0c\n\x05\x04\x05\x02\
    \0\x04\x12\x03$\x04\x0c\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03$\r\x16\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03$\x17*\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03$-.b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
