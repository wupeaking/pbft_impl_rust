// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `account.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub id: ::protobuf::SingularPtrField<super::transaction::address>,
    pub code: ::std::vec::Vec<u8>,
    pub balance: ::protobuf::SingularPtrField<super::transaction::amount>,
    pub account_type: i32,
    pub publick_key: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // .address id = 1;


    pub fn get_id(&self) -> &super::transaction::address {
        self.id.as_ref().unwrap_or_else(|| <super::transaction::address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    pub fn has_id(&self) -> bool {
        self.id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: super::transaction::address) {
        self.id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut super::transaction::address {
        if self.id.is_none() {
            self.id.set_default();
        }
        self.id.as_mut().unwrap()
    }

    // Take field
    pub fn take_id(&mut self) -> super::transaction::address {
        self.id.take().unwrap_or_else(|| super::transaction::address::new())
    }

    // bytes code = 2;


    pub fn get_code(&self) -> &[u8] {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.code, ::std::vec::Vec::new())
    }

    // .amount balance = 3;


    pub fn get_balance(&self) -> &super::transaction::amount {
        self.balance.as_ref().unwrap_or_else(|| <super::transaction::amount as ::protobuf::Message>::default_instance())
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    pub fn has_balance(&self) -> bool {
        self.balance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: super::transaction::amount) {
        self.balance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut super::transaction::amount {
        if self.balance.is_none() {
            self.balance.set_default();
        }
        self.balance.as_mut().unwrap()
    }

    // Take field
    pub fn take_balance(&mut self) -> super::transaction::amount {
        self.balance.take().unwrap_or_else(|| super::transaction::amount::new())
    }

    // int32 account_type = 4;


    pub fn get_account_type(&self) -> i32 {
        self.account_type
    }
    pub fn clear_account_type(&mut self) {
        self.account_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_account_type(&mut self, v: i32) {
        self.account_type = v;
    }

    // bytes publick_key = 5;


    pub fn get_publick_key(&self) -> &[u8] {
        &self.publick_key
    }
    pub fn clear_publick_key(&mut self) {
        self.publick_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_publick_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.publick_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publick_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.publick_key
    }

    // Take field
    pub fn take_publick_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.publick_key, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.balance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.balance)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.account_type = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.publick_key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.code);
        }
        if let Some(ref v) = self.balance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.account_type != 0 {
            my_size += ::protobuf::rt::value_size(4, self.account_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.publick_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.publick_key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.id.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.code.is_empty() {
            os.write_bytes(2, &self.code)?;
        }
        if let Some(ref v) = self.balance.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.account_type != 0 {
            os.write_int32(4, self.account_type)?;
        }
        if !self.publick_key.is_empty() {
            os.write_bytes(5, &self.publick_key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::address>>(
                "id",
                |m: &Account| { &m.id },
                |m: &mut Account| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "code",
                |m: &Account| { &m.code },
                |m: &mut Account| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::amount>>(
                "balance",
                |m: &Account| { &m.balance },
                |m: &mut Account| { &mut m.balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "account_type",
                |m: &Account| { &m.account_type },
                |m: &mut Account| { &mut m.account_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "publick_key",
                |m: &Account| { &m.publick_key },
                |m: &mut Account| { &mut m.publick_key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.id.clear();
        self.code.clear();
        self.balance.clear();
        self.account_type = 0;
        self.publick_key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AccountType {
    Unkown = 0,
    Normal = 1,
    Code = 2,
    Admin = 4,
    Verifier = 8,
}

impl ::protobuf::ProtobufEnum for AccountType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AccountType> {
        match value {
            0 => ::std::option::Option::Some(AccountType::Unkown),
            1 => ::std::option::Option::Some(AccountType::Normal),
            2 => ::std::option::Option::Some(AccountType::Code),
            4 => ::std::option::Option::Some(AccountType::Admin),
            8 => ::std::option::Option::Some(AccountType::Verifier),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AccountType] = &[
            AccountType::Unkown,
            AccountType::Normal,
            AccountType::Code,
            AccountType::Admin,
            AccountType::Verifier,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<AccountType>("AccountType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for AccountType {
}

impl ::std::default::Default for AccountType {
    fn default() -> Self {
        AccountType::Unkown
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\raccount.proto\x1a\x11transaction.proto\"\x9e\x01\n\x07Account\x12\
    \x18\n\x02id\x18\x01\x20\x01(\x0b2\x08.addressR\x02id\x12\x12\n\x04code\
    \x18\x02\x20\x01(\x0cR\x04code\x12!\n\x07balance\x18\x03\x20\x01(\x0b2\
    \x07.amountR\x07balance\x12!\n\x0caccount_type\x18\x04\x20\x01(\x05R\x0b\
    accountType\x12\x1f\n\x0bpublick_key\x18\x05\x20\x01(\x0cR\npublickKey*H\
    \n\x0bAccountType\x12\n\n\x06Unkown\x10\0\x12\n\n\x06Normal\x10\x01\x12\
    \x08\n\x04Code\x10\x02\x12\t\n\x05Admin\x10\x04\x12\x0c\n\x08Verifier\
    \x10\x08B\x13\n\x05modelP\x01Z\x08./;modelJ\xbd\x06\n\x06\x12\x04\0\0\
    \x18\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0\"\
    \n\t\n\x02\x08\n\x12\x03\x02\0\"\n\x08\n\x01\x08\x12\x03\x03\0\x1e\n\t\n\
    \x02\x08\x01\x12\x03\x03\0\x1e\n\x08\n\x01\x08\x12\x03\x04\0\x1f\n\t\n\
    \x02\x08\x0b\x12\x03\x04\0\x1f\n\t\n\x02\x03\0\x12\x03\x06\x07\x1a\n\n\n\
    \x02\x04\0\x12\x04\x08\0\x0e\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x0f\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x04\x13\n\r\n\x05\x04\0\x02\0\x04\x12\
    \x04\t\x04\x08\x11\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\t\x04\x0b\n\x0c\n\
    \x05\x04\0\x02\0\x01\x12\x03\t\x0c\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\
    \x03\t\x11\x12\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x04\x13\n\r\n\x05\x04\
    \0\x02\x01\x04\x12\x04\n\x04\t\x13\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \n\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\n\n\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x03\x12\x03\n\x11\x12\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0b\x04\
    \x17\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x0b\x04\n\x13\n\x0c\n\x05\x04\0\
    \x02\x02\x06\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\
    \x0b\x12\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x15\x16\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x0c\x04\x1b\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\
    \x0c\x04\x0b\x17\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0c\x04\t\n\x0c\n\
    \x05\x04\0\x02\x03\x01\x12\x03\x0c\n\x16\n\x0c\n\x05\x04\0\x02\x03\x03\
    \x12\x03\x0c\x19\x1a\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x04\x1a\n\r\n\
    \x05\x04\0\x02\x04\x04\x12\x04\r\x04\x0c\x1b\n\x0c\n\x05\x04\0\x02\x04\
    \x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\r\n\x15\n\x0c\
    \n\x05\x04\0\x02\x04\x03\x12\x03\r\x18\x19\n?\n\x02\x05\0\x12\x04\x12\0\
    \x18\x01\x1a3\x20\xe4\xb8\x80\xe4\xb8\xaa\xe8\xb4\xa6\xe6\x88\xb7\x20\
    \xe5\x8f\xaf\xe4\xbb\xa5\xe6\x98\xaf\xe4\xb8\x8b\xe9\x9d\xa2\xe5\x87\xa0\
    \xe4\xb8\xaa\xe7\xb1\xbb\xe5\x9e\x8b\xe7\x9a\x84\xe5\x90\x88\xe9\x9b\x86\
    \n\n\n\n\x03\x05\0\x01\x12\x03\x12\x05\x10\n\x16\n\x04\x05\0\x02\0\x12\
    \x03\x13\x04\x0f\"\t\x20default\n\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\
    \x13\x04\n\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x13\r\x0e\n\x1b\n\x04\x05\
    \0\x02\x01\x12\x03\x14\x04\x0f\"\x0e\x20\xe6\x99\xae\xe9\x80\x9a\xe8\xb4\
    \xa6\xe6\x88\xb7\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x14\x04\n\n\x0c\
    \n\x05\x05\0\x02\x01\x02\x12\x03\x14\r\x0e\n\x1b\n\x04\x05\0\x02\x02\x12\
    \x03\x15\x04\r\"\x0e\x20\xe5\x90\x88\xe7\xba\xa6\xe8\xb4\xa6\xe6\x88\xb7\
    \n\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x15\x04\x08\n\x0c\n\x05\x05\0\
    \x02\x02\x02\x12\x03\x15\x0b\x0c\n\x1e\n\x04\x05\0\x02\x03\x12\x03\x16\
    \x04\x0e\"\x11\x20\xe7\xae\xa1\xe7\x90\x86\xe5\x91\x98\xe8\xb4\xa6\xe6\
    \x88\xb7\n\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x16\x04\t\n\x0c\n\x05\
    \x05\0\x02\x03\x02\x12\x03\x16\x0c\r\n\x1e\n\x04\x05\0\x02\x04\x12\x03\
    \x17\x04\x11\"\x11\x20\xe9\xaa\x8c\xe8\xaf\x81\xe8\x80\x85\xe8\xb4\xa6\
    \xe6\x88\xb7\n\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\x17\x04\x0c\n\x0c\n\
    \x05\x05\0\x02\x04\x02\x12\x03\x17\x0f\x10b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
