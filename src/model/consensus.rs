// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `consensus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct SignPairs {
    // message fields
    pub signer_id: ::std::vec::Vec<u8>,
    pub sign: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignPairs {
    fn default() -> &'a SignPairs {
        <SignPairs as ::protobuf::Message>::default_instance()
    }
}

impl SignPairs {
    pub fn new() -> SignPairs {
        ::std::default::Default::default()
    }

    // bytes signer_id = 1;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }

    // bytes sign = 2;


    pub fn get_sign(&self) -> &[u8] {
        &self.sign
    }
    pub fn clear_sign(&mut self) {
        self.sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sign
    }

    // Take field
    pub fn take_sign(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sign, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignPairs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sign)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.signer_id);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.sign);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.signer_id.is_empty() {
            os.write_bytes(1, &self.signer_id)?;
        }
        if !self.sign.is_empty() {
            os.write_bytes(2, &self.sign)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignPairs {
        SignPairs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer_id",
                |m: &SignPairs| { &m.signer_id },
                |m: &mut SignPairs| { &mut m.signer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sign",
                |m: &SignPairs| { &m.sign },
                |m: &mut SignPairs| { &mut m.sign },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignPairs>(
                "SignPairs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignPairs {
        static instance: ::protobuf::rt::LazyV2<SignPairs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignPairs::new)
    }
}

impl ::protobuf::Clear for SignPairs {
    fn clear(&mut self) {
        self.signer_id.clear();
        self.sign.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignPairs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignPairs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftBlock {
    // message fields
    pub prev_block: ::std::string::String,
    pub block_id: ::std::string::String,
    pub signer_id: ::std::vec::Vec<u8>,
    pub time_stamp: u64,
    pub block_num: u64,
    pub tansactions: ::protobuf::SingularPtrField<super::transaction::txs>,
    pub transaction_receipts: ::protobuf::SingularPtrField<super::transaction::txReceipts>,
    pub tx_root: ::std::vec::Vec<u8>,
    pub tx_receipts_root: ::std::vec::Vec<u8>,
    pub sign: ::std::vec::Vec<u8>,
    pub view: u64,
    pub sign_pairs: ::protobuf::RepeatedField<SignPairs>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftBlock {
    fn default() -> &'a PbftBlock {
        <PbftBlock as ::protobuf::Message>::default_instance()
    }
}

impl PbftBlock {
    pub fn new() -> PbftBlock {
        ::std::default::Default::default()
    }

    // string prev_block = 1;


    pub fn get_prev_block(&self) -> &str {
        &self.prev_block
    }
    pub fn clear_prev_block(&mut self) {
        self.prev_block.clear();
    }

    // Param is passed by value, moved
    pub fn set_prev_block(&mut self, v: ::std::string::String) {
        self.prev_block = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prev_block(&mut self) -> &mut ::std::string::String {
        &mut self.prev_block
    }

    // Take field
    pub fn take_prev_block(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prev_block, ::std::string::String::new())
    }

    // string block_id = 2;


    pub fn get_block_id(&self) -> &str {
        &self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: ::std::string::String) {
        self.block_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_id(&mut self) -> &mut ::std::string::String {
        &mut self.block_id
    }

    // Take field
    pub fn take_block_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.block_id, ::std::string::String::new())
    }

    // bytes signer_id = 3;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }

    // uint64 time_stamp = 4;


    pub fn get_time_stamp(&self) -> u64 {
        self.time_stamp
    }
    pub fn clear_time_stamp(&mut self) {
        self.time_stamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_stamp(&mut self, v: u64) {
        self.time_stamp = v;
    }

    // uint64 block_num = 5;


    pub fn get_block_num(&self) -> u64 {
        self.block_num
    }
    pub fn clear_block_num(&mut self) {
        self.block_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_num(&mut self, v: u64) {
        self.block_num = v;
    }

    // .txs tansactions = 6;


    pub fn get_tansactions(&self) -> &super::transaction::txs {
        self.tansactions.as_ref().unwrap_or_else(|| <super::transaction::txs as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tansactions(&mut self) {
        self.tansactions.clear();
    }

    pub fn has_tansactions(&self) -> bool {
        self.tansactions.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tansactions(&mut self, v: super::transaction::txs) {
        self.tansactions = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tansactions(&mut self) -> &mut super::transaction::txs {
        if self.tansactions.is_none() {
            self.tansactions.set_default();
        }
        self.tansactions.as_mut().unwrap()
    }

    // Take field
    pub fn take_tansactions(&mut self) -> super::transaction::txs {
        self.tansactions.take().unwrap_or_else(|| super::transaction::txs::new())
    }

    // .txReceipts transaction_receipts = 9;


    pub fn get_transaction_receipts(&self) -> &super::transaction::txReceipts {
        self.transaction_receipts.as_ref().unwrap_or_else(|| <super::transaction::txReceipts as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction_receipts(&mut self) {
        self.transaction_receipts.clear();
    }

    pub fn has_transaction_receipts(&self) -> bool {
        self.transaction_receipts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_receipts(&mut self, v: super::transaction::txReceipts) {
        self.transaction_receipts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_receipts(&mut self) -> &mut super::transaction::txReceipts {
        if self.transaction_receipts.is_none() {
            self.transaction_receipts.set_default();
        }
        self.transaction_receipts.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_receipts(&mut self) -> super::transaction::txReceipts {
        self.transaction_receipts.take().unwrap_or_else(|| super::transaction::txReceipts::new())
    }

    // bytes tx_root = 11;


    pub fn get_tx_root(&self) -> &[u8] {
        &self.tx_root
    }
    pub fn clear_tx_root(&mut self) {
        self.tx_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_root(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_root(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_root
    }

    // Take field
    pub fn take_tx_root(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_root, ::std::vec::Vec::new())
    }

    // bytes tx_receipts_root = 12;


    pub fn get_tx_receipts_root(&self) -> &[u8] {
        &self.tx_receipts_root
    }
    pub fn clear_tx_receipts_root(&mut self) {
        self.tx_receipts_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_tx_receipts_root(&mut self, v: ::std::vec::Vec<u8>) {
        self.tx_receipts_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tx_receipts_root(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.tx_receipts_root
    }

    // Take field
    pub fn take_tx_receipts_root(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.tx_receipts_root, ::std::vec::Vec::new())
    }

    // bytes sign = 7;


    pub fn get_sign(&self) -> &[u8] {
        &self.sign
    }
    pub fn clear_sign(&mut self) {
        self.sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sign
    }

    // Take field
    pub fn take_sign(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sign, ::std::vec::Vec::new())
    }

    // uint64 view = 10;


    pub fn get_view(&self) -> u64 {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = 0;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: u64) {
        self.view = v;
    }

    // repeated .SignPairs sign_pairs = 8;


    pub fn get_sign_pairs(&self) -> &[SignPairs] {
        &self.sign_pairs
    }
    pub fn clear_sign_pairs(&mut self) {
        self.sign_pairs.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign_pairs(&mut self, v: ::protobuf::RepeatedField<SignPairs>) {
        self.sign_pairs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sign_pairs(&mut self) -> &mut ::protobuf::RepeatedField<SignPairs> {
        &mut self.sign_pairs
    }

    // Take field
    pub fn take_sign_pairs(&mut self) -> ::protobuf::RepeatedField<SignPairs> {
        ::std::mem::replace(&mut self.sign_pairs, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PbftBlock {
    fn is_initialized(&self) -> bool {
        for v in &self.tansactions {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_receipts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sign_pairs {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prev_block)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.block_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_stamp = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_num = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tansactions)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_receipts)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_root)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.tx_receipts_root)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sign)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.view = tmp;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sign_pairs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.prev_block.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.prev_block);
        }
        if !self.block_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.block_id);
        }
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signer_id);
        }
        if self.time_stamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.time_stamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_num != 0 {
            my_size += ::protobuf::rt::value_size(5, self.block_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.tansactions.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_receipts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tx_root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.tx_root);
        }
        if !self.tx_receipts_root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.tx_receipts_root);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.sign);
        }
        if self.view != 0 {
            my_size += ::protobuf::rt::value_size(10, self.view, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.sign_pairs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.prev_block.is_empty() {
            os.write_string(1, &self.prev_block)?;
        }
        if !self.block_id.is_empty() {
            os.write_string(2, &self.block_id)?;
        }
        if !self.signer_id.is_empty() {
            os.write_bytes(3, &self.signer_id)?;
        }
        if self.time_stamp != 0 {
            os.write_uint64(4, self.time_stamp)?;
        }
        if self.block_num != 0 {
            os.write_uint64(5, self.block_num)?;
        }
        if let Some(ref v) = self.tansactions.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_receipts.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tx_root.is_empty() {
            os.write_bytes(11, &self.tx_root)?;
        }
        if !self.tx_receipts_root.is_empty() {
            os.write_bytes(12, &self.tx_receipts_root)?;
        }
        if !self.sign.is_empty() {
            os.write_bytes(7, &self.sign)?;
        }
        if self.view != 0 {
            os.write_uint64(10, self.view)?;
        }
        for v in &self.sign_pairs {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftBlock {
        PbftBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prev_block",
                |m: &PbftBlock| { &m.prev_block },
                |m: &mut PbftBlock| { &mut m.prev_block },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "block_id",
                |m: &PbftBlock| { &m.block_id },
                |m: &mut PbftBlock| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer_id",
                |m: &PbftBlock| { &m.signer_id },
                |m: &mut PbftBlock| { &mut m.signer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "time_stamp",
                |m: &PbftBlock| { &m.time_stamp },
                |m: &mut PbftBlock| { &mut m.time_stamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_num",
                |m: &PbftBlock| { &m.block_num },
                |m: &mut PbftBlock| { &mut m.block_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::txs>>(
                "tansactions",
                |m: &PbftBlock| { &m.tansactions },
                |m: &mut PbftBlock| { &mut m.tansactions },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::transaction::txReceipts>>(
                "transaction_receipts",
                |m: &PbftBlock| { &m.transaction_receipts },
                |m: &mut PbftBlock| { &mut m.transaction_receipts },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_root",
                |m: &PbftBlock| { &m.tx_root },
                |m: &mut PbftBlock| { &mut m.tx_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "tx_receipts_root",
                |m: &PbftBlock| { &m.tx_receipts_root },
                |m: &mut PbftBlock| { &mut m.tx_receipts_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sign",
                |m: &PbftBlock| { &m.sign },
                |m: &mut PbftBlock| { &mut m.sign },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "view",
                |m: &PbftBlock| { &m.view },
                |m: &mut PbftBlock| { &mut m.view },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignPairs>>(
                "sign_pairs",
                |m: &PbftBlock| { &m.sign_pairs },
                |m: &mut PbftBlock| { &mut m.sign_pairs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftBlock>(
                "PbftBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftBlock {
        static instance: ::protobuf::rt::LazyV2<PbftBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftBlock::new)
    }
}

impl ::protobuf::Clear for PbftBlock {
    fn clear(&mut self) {
        self.prev_block.clear();
        self.block_id.clear();
        self.signer_id.clear();
        self.time_stamp = 0;
        self.block_num = 0;
        self.tansactions.clear();
        self.transaction_receipts.clear();
        self.tx_root.clear();
        self.tx_receipts_root.clear();
        self.sign.clear();
        self.view = 0;
        self.sign_pairs.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftMessageInfo {
    // message fields
    pub msg_type: MessageType,
    pub view: u64,
    pub seq_num: u64,
    pub signer_id: ::std::vec::Vec<u8>,
    pub sign: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftMessageInfo {
    fn default() -> &'a PbftMessageInfo {
        <PbftMessageInfo as ::protobuf::Message>::default_instance()
    }
}

impl PbftMessageInfo {
    pub fn new() -> PbftMessageInfo {
        ::std::default::Default::default()
    }

    // .MessageType msg_type = 1;


    pub fn get_msg_type(&self) -> MessageType {
        self.msg_type
    }
    pub fn clear_msg_type(&mut self) {
        self.msg_type = MessageType::Default;
    }

    // Param is passed by value, moved
    pub fn set_msg_type(&mut self, v: MessageType) {
        self.msg_type = v;
    }

    // uint64 view = 2;


    pub fn get_view(&self) -> u64 {
        self.view
    }
    pub fn clear_view(&mut self) {
        self.view = 0;
    }

    // Param is passed by value, moved
    pub fn set_view(&mut self, v: u64) {
        self.view = v;
    }

    // uint64 seq_num = 3;


    pub fn get_seq_num(&self) -> u64 {
        self.seq_num
    }
    pub fn clear_seq_num(&mut self) {
        self.seq_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_num(&mut self, v: u64) {
        self.seq_num = v;
    }

    // bytes signer_id = 4;


    pub fn get_signer_id(&self) -> &[u8] {
        &self.signer_id
    }
    pub fn clear_signer_id(&mut self) {
        self.signer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer_id
    }

    // Take field
    pub fn take_signer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer_id, ::std::vec::Vec::new())
    }

    // bytes sign = 5;


    pub fn get_sign(&self) -> &[u8] {
        &self.sign
    }
    pub fn clear_sign(&mut self) {
        self.sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sign
    }

    // Take field
    pub fn take_sign(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sign, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for PbftMessageInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.msg_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.view = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.seq_num = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer_id)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sign)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.msg_type != MessageType::Default {
            my_size += ::protobuf::rt::enum_size(1, self.msg_type);
        }
        if self.view != 0 {
            my_size += ::protobuf::rt::value_size(2, self.view, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.seq_num != 0 {
            my_size += ::protobuf::rt::value_size(3, self.seq_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.signer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.signer_id);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.sign);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.msg_type != MessageType::Default {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.msg_type))?;
        }
        if self.view != 0 {
            os.write_uint64(2, self.view)?;
        }
        if self.seq_num != 0 {
            os.write_uint64(3, self.seq_num)?;
        }
        if !self.signer_id.is_empty() {
            os.write_bytes(4, &self.signer_id)?;
        }
        if !self.sign.is_empty() {
            os.write_bytes(5, &self.sign)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftMessageInfo {
        PbftMessageInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MessageType>>(
                "msg_type",
                |m: &PbftMessageInfo| { &m.msg_type },
                |m: &mut PbftMessageInfo| { &mut m.msg_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "view",
                |m: &PbftMessageInfo| { &m.view },
                |m: &mut PbftMessageInfo| { &mut m.view },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "seq_num",
                |m: &PbftMessageInfo| { &m.seq_num },
                |m: &mut PbftMessageInfo| { &mut m.seq_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer_id",
                |m: &PbftMessageInfo| { &m.signer_id },
                |m: &mut PbftMessageInfo| { &mut m.signer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "sign",
                |m: &PbftMessageInfo| { &m.sign },
                |m: &mut PbftMessageInfo| { &mut m.sign },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftMessageInfo>(
                "PbftMessageInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftMessageInfo {
        static instance: ::protobuf::rt::LazyV2<PbftMessageInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftMessageInfo::new)
    }
}

impl ::protobuf::Clear for PbftMessageInfo {
    fn clear(&mut self) {
        self.msg_type = MessageType::Default;
        self.view = 0;
        self.seq_num = 0;
        self.signer_id.clear();
        self.sign.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftMessageInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftMessageInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftGenericMessage {
    // message fields
    pub info: ::protobuf::SingularPtrField<PbftMessageInfo>,
    pub block: ::protobuf::SingularPtrField<PbftBlock>,
    pub other_infos: ::protobuf::RepeatedField<PbftMessageInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftGenericMessage {
    fn default() -> &'a PbftGenericMessage {
        <PbftGenericMessage as ::protobuf::Message>::default_instance()
    }
}

impl PbftGenericMessage {
    pub fn new() -> PbftGenericMessage {
        ::std::default::Default::default()
    }

    // .PbftMessageInfo info = 1;


    pub fn get_info(&self) -> &PbftMessageInfo {
        self.info.as_ref().unwrap_or_else(|| <PbftMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: PbftMessageInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut PbftMessageInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> PbftMessageInfo {
        self.info.take().unwrap_or_else(|| PbftMessageInfo::new())
    }

    // .PbftBlock block = 2;


    pub fn get_block(&self) -> &PbftBlock {
        self.block.as_ref().unwrap_or_else(|| <PbftBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: PbftBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut PbftBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> PbftBlock {
        self.block.take().unwrap_or_else(|| PbftBlock::new())
    }

    // repeated .PbftMessageInfo other_infos = 3;


    pub fn get_other_infos(&self) -> &[PbftMessageInfo] {
        &self.other_infos
    }
    pub fn clear_other_infos(&mut self) {
        self.other_infos.clear();
    }

    // Param is passed by value, moved
    pub fn set_other_infos(&mut self, v: ::protobuf::RepeatedField<PbftMessageInfo>) {
        self.other_infos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_other_infos(&mut self) -> &mut ::protobuf::RepeatedField<PbftMessageInfo> {
        &mut self.other_infos
    }

    // Take field
    pub fn take_other_infos(&mut self) -> ::protobuf::RepeatedField<PbftMessageInfo> {
        ::std::mem::replace(&mut self.other_infos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PbftGenericMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.other_infos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.other_infos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.other_infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.other_infos {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftGenericMessage {
        PbftGenericMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftMessageInfo>>(
                "info",
                |m: &PbftGenericMessage| { &m.info },
                |m: &mut PbftGenericMessage| { &mut m.info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftBlock>>(
                "block",
                |m: &PbftGenericMessage| { &m.block },
                |m: &mut PbftGenericMessage| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftMessageInfo>>(
                "other_infos",
                |m: &PbftGenericMessage| { &m.other_infos },
                |m: &mut PbftGenericMessage| { &mut m.other_infos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftGenericMessage>(
                "PbftGenericMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftGenericMessage {
        static instance: ::protobuf::rt::LazyV2<PbftGenericMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftGenericMessage::new)
    }
}

impl ::protobuf::Clear for PbftGenericMessage {
    fn clear(&mut self) {
        self.info.clear();
        self.block.clear();
        self.other_infos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftGenericMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftGenericMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftViewChange {
    // message fields
    pub info: ::protobuf::SingularPtrField<PbftMessageInfo>,
    pub checkpoint_messages: ::protobuf::RepeatedField<PbftGenericMessage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftViewChange {
    fn default() -> &'a PbftViewChange {
        <PbftViewChange as ::protobuf::Message>::default_instance()
    }
}

impl PbftViewChange {
    pub fn new() -> PbftViewChange {
        ::std::default::Default::default()
    }

    // .PbftMessageInfo info = 1;


    pub fn get_info(&self) -> &PbftMessageInfo {
        self.info.as_ref().unwrap_or_else(|| <PbftMessageInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_info(&mut self) {
        self.info.clear();
    }

    pub fn has_info(&self) -> bool {
        self.info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info(&mut self, v: PbftMessageInfo) {
        self.info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info(&mut self) -> &mut PbftMessageInfo {
        if self.info.is_none() {
            self.info.set_default();
        }
        self.info.as_mut().unwrap()
    }

    // Take field
    pub fn take_info(&mut self) -> PbftMessageInfo {
        self.info.take().unwrap_or_else(|| PbftMessageInfo::new())
    }

    // repeated .PbftGenericMessage checkpoint_messages = 2;


    pub fn get_checkpoint_messages(&self) -> &[PbftGenericMessage] {
        &self.checkpoint_messages
    }
    pub fn clear_checkpoint_messages(&mut self) {
        self.checkpoint_messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_checkpoint_messages(&mut self, v: ::protobuf::RepeatedField<PbftGenericMessage>) {
        self.checkpoint_messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_checkpoint_messages(&mut self) -> &mut ::protobuf::RepeatedField<PbftGenericMessage> {
        &mut self.checkpoint_messages
    }

    // Take field
    pub fn take_checkpoint_messages(&mut self) -> ::protobuf::RepeatedField<PbftGenericMessage> {
        ::std::mem::replace(&mut self.checkpoint_messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for PbftViewChange {
    fn is_initialized(&self) -> bool {
        for v in &self.info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.checkpoint_messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.checkpoint_messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.checkpoint_messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.checkpoint_messages {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftViewChange {
        PbftViewChange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftMessageInfo>>(
                "info",
                |m: &PbftViewChange| { &m.info },
                |m: &mut PbftViewChange| { &mut m.info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PbftGenericMessage>>(
                "checkpoint_messages",
                |m: &PbftViewChange| { &m.checkpoint_messages },
                |m: &mut PbftViewChange| { &mut m.checkpoint_messages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftViewChange>(
                "PbftViewChange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftViewChange {
        static instance: ::protobuf::rt::LazyV2<PbftViewChange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftViewChange::new)
    }
}

impl ::protobuf::Clear for PbftViewChange {
    fn clear(&mut self) {
        self.info.clear();
        self.checkpoint_messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftViewChange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftViewChange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PbftMessage {
    // message oneof groups
    pub msg: ::std::option::Option<PbftMessage_oneof_msg>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PbftMessage {
    fn default() -> &'a PbftMessage {
        <PbftMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PbftMessage_oneof_msg {
    generic(PbftGenericMessage),
    view_change(PbftViewChange),
}

impl PbftMessage {
    pub fn new() -> PbftMessage {
        ::std::default::Default::default()
    }

    // .PbftGenericMessage generic = 1;


    pub fn get_generic(&self) -> &PbftGenericMessage {
        match self.msg {
            ::std::option::Option::Some(PbftMessage_oneof_msg::generic(ref v)) => v,
            _ => <PbftGenericMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_generic(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_generic(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(PbftMessage_oneof_msg::generic(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_generic(&mut self, v: PbftGenericMessage) {
        self.msg = ::std::option::Option::Some(PbftMessage_oneof_msg::generic(v))
    }

    // Mutable pointer to the field.
    pub fn mut_generic(&mut self) -> &mut PbftGenericMessage {
        if let ::std::option::Option::Some(PbftMessage_oneof_msg::generic(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(PbftMessage_oneof_msg::generic(PbftGenericMessage::new()));
        }
        match self.msg {
            ::std::option::Option::Some(PbftMessage_oneof_msg::generic(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_generic(&mut self) -> PbftGenericMessage {
        if self.has_generic() {
            match self.msg.take() {
                ::std::option::Option::Some(PbftMessage_oneof_msg::generic(v)) => v,
                _ => panic!(),
            }
        } else {
            PbftGenericMessage::new()
        }
    }

    // .PbftViewChange view_change = 2;


    pub fn get_view_change(&self) -> &PbftViewChange {
        match self.msg {
            ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(ref v)) => v,
            _ => <PbftViewChange as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_view_change(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_view_change(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_view_change(&mut self, v: PbftViewChange) {
        self.msg = ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(v))
    }

    // Mutable pointer to the field.
    pub fn mut_view_change(&mut self) -> &mut PbftViewChange {
        if let ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(PbftViewChange::new()));
        }
        match self.msg {
            ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_view_change(&mut self) -> PbftViewChange {
        if self.has_view_change() {
            match self.msg.take() {
                ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(v)) => v,
                _ => panic!(),
            }
        } else {
            PbftViewChange::new()
        }
    }
}

impl ::protobuf::Message for PbftMessage {
    fn is_initialized(&self) -> bool {
        if let Some(PbftMessage_oneof_msg::generic(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PbftMessage_oneof_msg::view_change(ref v)) = self.msg {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(PbftMessage_oneof_msg::generic(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.msg = ::std::option::Option::Some(PbftMessage_oneof_msg::view_change(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &PbftMessage_oneof_msg::generic(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PbftMessage_oneof_msg::view_change(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &PbftMessage_oneof_msg::generic(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PbftMessage_oneof_msg::view_change(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PbftMessage {
        PbftMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PbftGenericMessage>(
                "generic",
                PbftMessage::has_generic,
                PbftMessage::get_generic,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PbftViewChange>(
                "view_change",
                PbftMessage::has_view_change,
                PbftMessage::get_view_change,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PbftMessage>(
                "PbftMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PbftMessage {
        static instance: ::protobuf::rt::LazyV2<PbftMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PbftMessage::new)
    }
}

impl ::protobuf::Clear for PbftMessage {
    fn clear(&mut self) {
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PbftMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PbftMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct verifier {
    // message fields
    pub publick_key: ::std::vec::Vec<u8>,
    pub private_key: ::std::vec::Vec<u8>,
    pub seq_num: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a verifier {
    fn default() -> &'a verifier {
        <verifier as ::protobuf::Message>::default_instance()
    }
}

impl verifier {
    pub fn new() -> verifier {
        ::std::default::Default::default()
    }

    // bytes publick_key = 1;


    pub fn get_publick_key(&self) -> &[u8] {
        &self.publick_key
    }
    pub fn clear_publick_key(&mut self) {
        self.publick_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_publick_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.publick_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_publick_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.publick_key
    }

    // Take field
    pub fn take_publick_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.publick_key, ::std::vec::Vec::new())
    }

    // bytes private_key = 2;


    pub fn get_private_key(&self) -> &[u8] {
        &self.private_key
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.private_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.private_key
    }

    // Take field
    pub fn take_private_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.private_key, ::std::vec::Vec::new())
    }

    // int32 seq_num = 3;


    pub fn get_seq_num(&self) -> i32 {
        self.seq_num
    }
    pub fn clear_seq_num(&mut self) {
        self.seq_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_seq_num(&mut self, v: i32) {
        self.seq_num = v;
    }
}

impl ::protobuf::Message for verifier {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.publick_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.private_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.seq_num = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.publick_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.publick_key);
        }
        if !self.private_key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.private_key);
        }
        if self.seq_num != 0 {
            my_size += ::protobuf::rt::value_size(3, self.seq_num, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.publick_key.is_empty() {
            os.write_bytes(1, &self.publick_key)?;
        }
        if !self.private_key.is_empty() {
            os.write_bytes(2, &self.private_key)?;
        }
        if self.seq_num != 0 {
            os.write_int32(3, self.seq_num)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> verifier {
        verifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "publick_key",
                |m: &verifier| { &m.publick_key },
                |m: &mut verifier| { &mut m.publick_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "private_key",
                |m: &verifier| { &m.private_key },
                |m: &mut verifier| { &mut m.private_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "seq_num",
                |m: &verifier| { &m.seq_num },
                |m: &mut verifier| { &mut m.seq_num },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<verifier>(
                "verifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static verifier {
        static instance: ::protobuf::rt::LazyV2<verifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(verifier::new)
    }
}

impl ::protobuf::Clear for verifier {
    fn clear(&mut self) {
        self.publick_key.clear();
        self.private_key.clear();
        self.seq_num = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for verifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for verifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct genesis {
    // message fields
    pub verifiers: ::protobuf::RepeatedField<verifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a genesis {
    fn default() -> &'a genesis {
        <genesis as ::protobuf::Message>::default_instance()
    }
}

impl genesis {
    pub fn new() -> genesis {
        ::std::default::Default::default()
    }

    // repeated .verifier verifiers = 1;


    pub fn get_verifiers(&self) -> &[verifier] {
        &self.verifiers
    }
    pub fn clear_verifiers(&mut self) {
        self.verifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_verifiers(&mut self, v: ::protobuf::RepeatedField<verifier>) {
        self.verifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verifiers(&mut self) -> &mut ::protobuf::RepeatedField<verifier> {
        &mut self.verifiers
    }

    // Take field
    pub fn take_verifiers(&mut self) -> ::protobuf::RepeatedField<verifier> {
        ::std::mem::replace(&mut self.verifiers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for genesis {
    fn is_initialized(&self) -> bool {
        for v in &self.verifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.verifiers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.verifiers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.verifiers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> genesis {
        genesis::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<verifier>>(
                "verifiers",
                |m: &genesis| { &m.verifiers },
                |m: &mut genesis| { &mut m.verifiers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<genesis>(
                "genesis",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static genesis {
        static instance: ::protobuf::rt::LazyV2<genesis> = ::protobuf::rt::LazyV2::INIT;
        instance.get(genesis::new)
    }
}

impl ::protobuf::Clear for genesis {
    fn clear(&mut self) {
        self.verifiers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for genesis {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for genesis {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    Default = 0,
    PrePrepare = 1,
    Prepare = 2,
    Commit = 3,
    Checkpoint = 4,
    ViewChange = 5,
    NewBlockProposal = 6,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::Default),
            1 => ::std::option::Option::Some(MessageType::PrePrepare),
            2 => ::std::option::Option::Some(MessageType::Prepare),
            3 => ::std::option::Option::Some(MessageType::Commit),
            4 => ::std::option::Option::Some(MessageType::Checkpoint),
            5 => ::std::option::Option::Some(MessageType::ViewChange),
            6 => ::std::option::Option::Some(MessageType::NewBlockProposal),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::Default,
            MessageType::PrePrepare,
            MessageType::Prepare,
            MessageType::Commit,
            MessageType::Checkpoint,
            MessageType::ViewChange,
            MessageType::NewBlockProposal,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<MessageType>("MessageType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::std::default::Default for MessageType {
    fn default() -> Self {
        MessageType::Default
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum States {
    NotStartd = 0,
    PrePreparing = 1,
    Preparing = 2,
    Checking = 3,
    Committing = 4,
    Finished = 5,
    ViewChanging = 6,
    Checkpointing = 7,
}

impl ::protobuf::ProtobufEnum for States {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<States> {
        match value {
            0 => ::std::option::Option::Some(States::NotStartd),
            1 => ::std::option::Option::Some(States::PrePreparing),
            2 => ::std::option::Option::Some(States::Preparing),
            3 => ::std::option::Option::Some(States::Checking),
            4 => ::std::option::Option::Some(States::Committing),
            5 => ::std::option::Option::Some(States::Finished),
            6 => ::std::option::Option::Some(States::ViewChanging),
            7 => ::std::option::Option::Some(States::Checkpointing),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [States] = &[
            States::NotStartd,
            States::PrePreparing,
            States::Preparing,
            States::Checking,
            States::Committing,
            States::Finished,
            States::ViewChanging,
            States::Checkpointing,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<States>("States", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for States {
}

impl ::std::default::Default for States {
    fn default() -> Self {
        States::NotStartd
    }
}

impl ::protobuf::reflect::ProtobufValue for States {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\x1a\x11transaction.proto\"<\n\tSignPairs\x12\x1b\n\
    \tsigner_id\x18\x01\x20\x01(\x0cR\x08signerId\x12\x12\n\x04sign\x18\x02\
    \x20\x01(\x0cR\x04sign\"\x9c\x03\n\tPbftBlock\x12\x1d\n\nprev_block\x18\
    \x01\x20\x01(\tR\tprevBlock\x12\x19\n\x08block_id\x18\x02\x20\x01(\tR\
    \x07blockId\x12\x1b\n\tsigner_id\x18\x03\x20\x01(\x0cR\x08signerId\x12\
    \x1d\n\ntime_stamp\x18\x04\x20\x01(\x04R\ttimeStamp\x12\x1b\n\tblock_num\
    \x18\x05\x20\x01(\x04R\x08blockNum\x12&\n\x0btansactions\x18\x06\x20\x01\
    (\x0b2\x04.txsR\x0btansactions\x12>\n\x14transaction_receipts\x18\t\x20\
    \x01(\x0b2\x0b.txReceiptsR\x13transactionReceipts\x12\x17\n\x07tx_root\
    \x18\x0b\x20\x01(\x0cR\x06txRoot\x12(\n\x10tx_receipts_root\x18\x0c\x20\
    \x01(\x0cR\x0etxReceiptsRoot\x12\x12\n\x04sign\x18\x07\x20\x01(\x0cR\x04\
    sign\x12\x12\n\x04view\x18\n\x20\x01(\x04R\x04view\x12)\n\nsign_pairs\
    \x18\x08\x20\x03(\x0b2\n.SignPairsR\tsignPairs\"\x98\x01\n\x0fPbftMessag\
    eInfo\x12'\n\x08msg_type\x18\x01\x20\x01(\x0e2\x0c.MessageTypeR\x07msgTy\
    pe\x12\x12\n\x04view\x18\x02\x20\x01(\x04R\x04view\x12\x17\n\x07seq_num\
    \x18\x03\x20\x01(\x04R\x06seqNum\x12\x1b\n\tsigner_id\x18\x04\x20\x01(\
    \x0cR\x08signerId\x12\x12\n\x04sign\x18\x05\x20\x01(\x0cR\x04sign\"\x8f\
    \x01\n\x12PbftGenericMessage\x12$\n\x04info\x18\x01\x20\x01(\x0b2\x10.Pb\
    ftMessageInfoR\x04info\x12\x20\n\x05block\x18\x02\x20\x01(\x0b2\n.PbftBl\
    ockR\x05block\x121\n\x0bother_infos\x18\x03\x20\x03(\x0b2\x10.PbftMessag\
    eInfoR\notherInfos\"|\n\x0ePbftViewChange\x12$\n\x04info\x18\x01\x20\x01\
    (\x0b2\x10.PbftMessageInfoR\x04info\x12D\n\x13checkpoint_messages\x18\
    \x02\x20\x03(\x0b2\x13.PbftGenericMessageR\x12checkpointMessages\"y\n\
    \x0bPbftMessage\x12/\n\x07generic\x18\x01\x20\x01(\x0b2\x13.PbftGenericM\
    essageH\0R\x07generic\x122\n\x0bview_change\x18\x02\x20\x01(\x0b2\x0f.Pb\
    ftViewChangeH\0R\nviewChangeB\x05\n\x03msg\"e\n\x08verifier\x12\x1f\n\
    \x0bpublick_key\x18\x01\x20\x01(\x0cR\npublickKey\x12\x1f\n\x0bprivate_k\
    ey\x18\x02\x20\x01(\x0cR\nprivateKey\x12\x17\n\x07seq_num\x18\x03\x20\
    \x01(\x05R\x06seqNum\"2\n\x07genesis\x12'\n\tverifiers\x18\x01\x20\x03(\
    \x0b2\t.verifierR\tverifiers*y\n\x0bMessageType\x12\x0b\n\x07Default\x10\
    \0\x12\x0e\n\nPrePrepare\x10\x01\x12\x0b\n\x07Prepare\x10\x02\x12\n\n\
    \x06Commit\x10\x03\x12\x0e\n\nCheckpoint\x10\x04\x12\x0e\n\nViewChange\
    \x10\x05\x12\x14\n\x10NewBlockProposal\x10\x06*\x89\x01\n\x06States\x12\
    \r\n\tNotStartd\x10\0\x12\x10\n\x0cPrePreparing\x10\x01\x12\r\n\tPrepari\
    ng\x10\x02\x12\x0c\n\x08Checking\x10\x03\x12\x0e\n\nCommitting\x10\x04\
    \x12\x0c\n\x08Finished\x10\x05\x12\x10\n\x0cViewChanging\x10\x06\x12\x11\
    \n\rCheckpointing\x10\x07B\x13\n\x05modelP\x01Z\x08./;modelJ\xa0\x1d\n\
    \x06\x12\x04\0\0r\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\
    \x12\x03\x02\0\"\n\t\n\x02\x08\n\x12\x03\x02\0\"\n\x08\n\x01\x08\x12\x03\
    \x03\0\x1e\n\t\n\x02\x08\x01\x12\x03\x03\0\x1e\n\x08\n\x01\x08\x12\x03\
    \x04\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x04\0\x1f\n\t\n\x02\x03\0\x12\x03\
    \x06\x07\x1a\n\n\n\x02\x05\0\x12\x04\x08\0\x10\x01\n\n\n\x03\x05\0\x01\
    \x12\x03\x08\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x03\t\x04\x10\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\t\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\t\x0e\x0f\n\x18\n\x04\x05\0\x02\x01\x12\x03\n\x04\x13\"\x0b\x20\xe9\
    \xa2\x84\xe5\x87\x86\xe5\xa4\x87\n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\
    \n\x04\x0e\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\n\x11\x12\n\x15\n\x04\
    \x05\0\x02\x02\x12\x03\x0b\x04\x10\"\x08\x20\xe5\x87\x86\xe5\xa4\x87\n\n\
    \x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x0b\x04\x0b\n\x0c\n\x05\x05\0\x02\
    \x02\x02\x12\x03\x0b\x0e\x0f\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0c\x04\
    \x0f\n\x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x0c\x04\n\n\x0c\n\x05\x05\0\
    \x02\x03\x02\x12\x03\x0c\r\x0e\n\x0b\n\x04\x05\0\x02\x04\x12\x03\r\x04\
    \x13\n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\r\x04\x0e\n\x0c\n\x05\x05\0\
    \x02\x04\x02\x12\x03\r\x11\x12\n\x0b\n\x04\x05\0\x02\x05\x12\x03\x0e\x04\
    \x13\n\x0c\n\x05\x05\0\x02\x05\x01\x12\x03\x0e\x04\x0e\n\x0c\n\x05\x05\0\
    \x02\x05\x02\x12\x03\x0e\x11\x12\n\x0b\n\x04\x05\0\x02\x06\x12\x03\x0f\
    \x04\x19\n\x0c\n\x05\x05\0\x02\x06\x01\x12\x03\x0f\x04\x14\n\x0c\n\x05\
    \x05\0\x02\x06\x02\x12\x03\x0f\x17\x18\n#\n\x02\x05\x01\x12\x04\x14\0\
    \x1d\x01\x1a\x17\x20\xe7\x8a\xb6\xe6\x80\x81\xe6\x9c\xba\xe6\xb5\x81\xe8\
    \xbd\xac\xe5\x88\x97\xe8\xa1\xa8\n\n\n\n\x03\x05\x01\x01\x12\x03\x14\x05\
    \x0b\n\x0b\n\x04\x05\x01\x02\0\x12\x03\x15\x04\x12\n\x0c\n\x05\x05\x01\
    \x02\0\x01\x12\x03\x15\x04\r\n\x0c\n\x05\x05\x01\x02\0\x02\x12\x03\x15\
    \x10\x11\n\x0b\n\x04\x05\x01\x02\x01\x12\x03\x16\x04\x15\n\x0c\n\x05\x05\
    \x01\x02\x01\x01\x12\x03\x16\x04\x10\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\
    \x03\x16\x13\x14\n\x0b\n\x04\x05\x01\x02\x02\x12\x03\x17\x04\x12\n\x0c\n\
    \x05\x05\x01\x02\x02\x01\x12\x03\x17\x04\r\n\x0c\n\x05\x05\x01\x02\x02\
    \x02\x12\x03\x17\x10\x11\n\x0b\n\x04\x05\x01\x02\x03\x12\x03\x18\x04\x11\
    \n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03\x18\x04\x0c\n\x0c\n\x05\x05\x01\
    \x02\x03\x02\x12\x03\x18\x0f\x10\n\x0b\n\x04\x05\x01\x02\x04\x12\x03\x19\
    \x04\x13\n\x0c\n\x05\x05\x01\x02\x04\x01\x12\x03\x19\x04\x0e\n\x0c\n\x05\
    \x05\x01\x02\x04\x02\x12\x03\x19\x11\x12\n\x0b\n\x04\x05\x01\x02\x05\x12\
    \x03\x1a\x04\x11\n\x0c\n\x05\x05\x01\x02\x05\x01\x12\x03\x1a\x04\x0c\n\
    \x0c\n\x05\x05\x01\x02\x05\x02\x12\x03\x1a\x0f\x10\n\x0b\n\x04\x05\x01\
    \x02\x06\x12\x03\x1b\x04\x15\n\x0c\n\x05\x05\x01\x02\x06\x01\x12\x03\x1b\
    \x04\x10\n\x0c\n\x05\x05\x01\x02\x06\x02\x12\x03\x1b\x13\x14\n\x0b\n\x04\
    \x05\x01\x02\x07\x12\x03\x1c\x04\x16\n\x0c\n\x05\x05\x01\x02\x07\x01\x12\
    \x03\x1c\x04\x11\n\x0c\n\x05\x05\x01\x02\x07\x02\x12\x03\x1c\x14\x15\n\n\
    \n\x02\x04\0\x12\x04\x1f\0$\x01\n\n\n\x03\x04\0\x01\x12\x03\x1f\x08\x11\
    \n\x1b\n\x04\x04\0\x02\0\x12\x03!\x04\x18\x1a\x0e\x20\xe7\xad\xbe\xe5\
    \x90\x8d\xe5\x85\xac\xe9\x92\xa5\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04!\
    \x04\x1f\x13\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03!\x04\t\n\x0c\n\x05\x04\
    \0\x02\0\x01\x12\x03!\n\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03!\x16\x17\
    \n\x1b\n\x04\x04\0\x02\x01\x12\x03#\x04\x14\x1a\x0e\x20\xe7\xad\xbe\xe5\
    \x90\x8d\xe5\x86\x85\xe5\xae\xb9\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04#\
    \x04!\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03#\x04\t\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03#\n\x0e\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03#\x12\
    \x13\n\n\n\x02\x04\x01\x12\x04&\0?\x01\n\n\n\x03\x04\x01\x01\x12\x03&\
    \x08\x11\n\x0b\n\x04\x04\x01\x02\0\x12\x03'\x04\x1a\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04'\x04&\x13\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03'\x04\
    \n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03'\x0b\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03'\x18\x19\n#\n\x04\x04\x01\x02\x01\x12\x03)\x04\x18\
    \x1a\x16\x20\xe5\x8c\xba\xe5\x9d\x97\xe9\x93\xbe\xe7\x9a\x84hash\xe5\x80\
    \xbc\x20\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04)\x04'\x1a\n\x0c\n\x05\
    \x04\x01\x02\x01\x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\
    \x03)\x0b\x13\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03)\x16\x17\n!\n\x04\
    \x04\x01\x02\x02\x12\x03+\x04\x18\x1a\x14\x20\xe4\xb8\xbb\xe9\xaa\x8c\
    \xe8\xaf\x81\xe8\x80\x85\xe5\x85\xac\xe9\x92\xa5\n\n\r\n\x05\x04\x01\x02\
    \x02\x04\x12\x04+\x04)\x18\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03+\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03+\n\x13\n\x0c\n\x05\x04\x01\
    \x02\x02\x03\x12\x03+\x16\x17\n!\n\x04\x04\x01\x02\x03\x12\x03.\x04\x1a\
    \x1a\x14\x20\xe4\xbb\xa5UTC\xe6\x97\xb6\xe9\x97\xb4\xe4\xb8\xba\xe5\x87\
    \x86\n\n\r\n\x05\x04\x01\x02\x03\x04\x12\x04.\x04+\x18\n\x0c\n\x05\x04\
    \x01\x02\x03\x05\x12\x03.\x04\n\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03.\
    \x0b\x15\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03.\x18\x19\n\x0b\n\x04\
    \x04\x01\x02\x04\x12\x030\x04\x19\n\r\n\x05\x04\x01\x02\x04\x04\x12\x040\
    \x04.\x1a\n\x0c\n\x05\x04\x01\x02\x04\x05\x12\x030\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x04\x01\x12\x030\x0b\x14\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\
    \x030\x17\x18\n/\n\x04\x04\x01\x02\x05\x12\x033\x04\x18\x1a\"\x20\xe4\
    \xba\xa4\xe6\x98\x93\xe5\x88\x97\xe8\xa1\xa8\n\x20bytes\x20content\x20=\
    \x206;\n\n\r\n\x05\x04\x01\x02\x05\x04\x12\x043\x040\x19\n\x0c\n\x05\x04\
    \x01\x02\x05\x06\x12\x033\x04\x07\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\
    \x033\x08\x13\n\x0c\n\x05\x04\x01\x02\x05\x03\x12\x033\x16\x17\n\x0b\n\
    \x04\x04\x01\x02\x06\x12\x034\x04(\n\r\n\x05\x04\x01\x02\x06\x04\x12\x04\
    4\x043\x18\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x034\x04\x0e\n\x0c\n\x05\
    \x04\x01\x02\x06\x01\x12\x034\x0f#\n\x0c\n\x05\x04\x01\x02\x06\x03\x12\
    \x034&'\n\x0b\n\x04\x04\x01\x02\x07\x12\x036\x04\x17\n\r\n\x05\x04\x01\
    \x02\x07\x04\x12\x046\x044(\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x036\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\x036\n\x11\n\x0c\n\x05\x04\x01\
    \x02\x07\x03\x12\x036\x14\x16\n\x0b\n\x04\x04\x01\x02\x08\x12\x037\x04\
    \x20\n\r\n\x05\x04\x01\x02\x08\x04\x12\x047\x046\x17\n\x0c\n\x05\x04\x01\
    \x02\x08\x05\x12\x037\x04\t\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x037\n\
    \x1a\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x037\x1d\x1f\n\x1b\n\x04\x04\
    \x01\x02\t\x12\x03:\x04\x13\x1a\x0e\x20\xe5\x86\x85\xe5\xae\xb9\xe7\xad\
    \xbe\xe5\x90\x8d\n\n\r\n\x05\x04\x01\x02\t\x04\x12\x04:\x047\x20\n\x0c\n\
    \x05\x04\x01\x02\t\x05\x12\x03:\x04\t\n\x0c\n\x05\x04\x01\x02\t\x01\x12\
    \x03:\n\x0e\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03:\x11\x12\n\x1b\n\x04\
    \x04\x01\x02\n\x12\x03<\x04\x15\x1a\x0e\x20\xe8\xa7\x86\xe5\x9b\xbe\xe7\
    \xbc\x96\xe5\x8f\xb7\n\n\r\n\x05\x04\x01\x02\n\x04\x12\x04<\x04:\x13\n\
    \x0c\n\x05\x04\x01\x02\n\x05\x12\x03<\x04\n\n\x0c\n\x05\x04\x01\x02\n\
    \x01\x12\x03<\x0b\x0f\n\x0c\n\x05\x04\x01\x02\n\x03\x12\x03<\x12\x14\n\
    \x0b\n\x04\x04\x01\x02\x0b\x12\x03>\x04&\n\x0c\n\x05\x04\x01\x02\x0b\x04\
    \x12\x03>\x04\x0c\n\x0c\n\x05\x04\x01\x02\x0b\x06\x12\x03>\r\x16\n\x0c\n\
    \x05\x04\x01\x02\x0b\x01\x12\x03>\x17!\n\x0c\n\x05\x04\x01\x02\x0b\x03\
    \x12\x03>$%\n\n\n\x02\x04\x02\x12\x04C\0N\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03C\x08\x17\n\"\n\x04\x04\x02\x02\0\x12\x03E\x04\x1d\x1a\x15\x20Type\
    \x20of\x20the\x20message\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04E\x04C\x19\
    \n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03E\x04\x0f\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03E\x10\x18\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03E\x1b\x1c\n\
    \x1a\n\x04\x04\x02\x02\x01\x12\x03G\x04\x14\x1a\r\x20View\x20number\n\n\
    \r\n\x05\x04\x02\x02\x01\x04\x12\x04G\x04E\x1d\n\x0c\n\x05\x04\x02\x02\
    \x01\x05\x12\x03G\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03G\x0b\x0f\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03G\x12\x13\n\x1e\n\x04\x04\x02\
    \x02\x02\x12\x03I\x04\x17\x1a\x11\x20Sequence\x20number\n\n\r\n\x05\x04\
    \x02\x02\x02\x04\x12\x04I\x04G\x14\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03I\x04\n\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03I\x0b\x12\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03I\x15\x16\n*\n\x04\x04\x02\x02\x03\x12\x03K\
    \x04\x18\x1a\x1d\x20Node\x20who\x20signed\x20the\x20message\n\n\r\n\x05\
    \x04\x02\x02\x03\x04\x12\x04K\x04I\x17\n\x0c\n\x05\x04\x02\x02\x03\x05\
    \x12\x03K\x04\t\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03K\n\x13\n\x0c\n\
    \x05\x04\x02\x02\x03\x03\x12\x03K\x16\x17\n\x1b\n\x04\x04\x02\x02\x04\
    \x12\x03M\x04\x13\x1a\x0e\x20\xe7\xad\xbe\xe5\x90\x8d\xe5\x86\x85\xe5\
    \xae\xb9\n\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04M\x04K\x18\n\x0c\n\x05\
    \x04\x02\x02\x04\x05\x12\x03M\x04\t\n\x0c\n\x05\x04\x02\x02\x04\x01\x12\
    \x03M\n\x0e\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03M\x11\x12\na\n\x02\
    \x04\x03\x12\x04Q\0X\x01\x1aU\x20PbftGenericMessage\x20A\x20generic\x20P\
    BFT\x20message\x20(PrePrepare,\x20Prepare,\x20Commit,\x20Checkpoint)\n\n\
    \n\n\x03\x04\x03\x01\x12\x03Q\x08\x1a\n\"\n\x04\x04\x03\x02\0\x12\x03S\
    \x04\x1d\x1a\x15\x20Message\x20information\n\n\r\n\x05\x04\x03\x02\0\x04\
    \x12\x04S\x04Q\x1c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03S\x04\x13\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x03S\x14\x18\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x03S\x1b\x1c\n!\n\x04\x04\x03\x02\x01\x12\x03U\x04\x18\x1a\x14\x20T\
    he\x20actual\x20message\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04U\x04S\
    \x1d\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03U\x04\r\n\x0c\n\x05\x04\x03\
    \x02\x01\x01\x12\x03U\x0e\x13\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03U\
    \x16\x17\n3\n\x04\x04\x03\x02\x02\x12\x03W\x04-\x1a&\x20\xe6\x94\xb6\xe5\
    \x88\xb0\xe7\x9a\x84\xe5\x85\xb6\xe4\xbb\x96\xe8\x8a\x82\xe7\x82\xb9\xe5\
    \x8f\x91\xe9\x80\x81\xe7\x9a\x84\xe6\xb6\x88\xe6\x81\xaf\n\n\x0c\n\x05\
    \x04\x03\x02\x02\x04\x12\x03W\x04\x0c\n\x0c\n\x05\x04\x03\x02\x02\x06\
    \x12\x03W\r\x1c\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03W\x1d(\n\x0c\n\
    \x05\x04\x03\x02\x02\x03\x12\x03W+,\nV\n\x02\x04\x04\x12\x04[\0a\x01\x1a\
    J\x20View\x20change\x20message,\x20for\x20when\x20a\x20node\x20suspects\
    \x20the\x20primary\x20node\x20is\x20faulty\n\n\n\n\x03\x04\x04\x01\x12\
    \x03[\x08\x16\n\"\n\x04\x04\x04\x02\0\x12\x03]\x04\x1d\x1a\x15\x20Messag\
    e\x20information\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04]\x04[\x18\n\x0c\n\
    \x05\x04\x04\x02\0\x06\x12\x03]\x04\x13\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03]\x14\x18\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03]\x1b\x1c\n{\n\
    \x04\x04\x04\x02\x01\x12\x03`\x048\x1an\x20Set\x20of\x20`2f\x20+\x201`\
    \x20Checkpoint\x20messages,\x20proving\x20correctness\x20of\x20stable\n\
    \x20Checkpoint\x20mentioned\x20in\x20info's\x20`seq_num`\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x04\x12\x03`\x04\x0c\n\x0c\n\x05\x04\x04\x02\x01\x06\
    \x12\x03`\r\x1f\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03`\x203\n\x0c\n\
    \x05\x04\x04\x02\x01\x03\x12\x03`67\n\n\n\x02\x04\x05\x12\x04c\0h\x01\n\
    \n\n\x03\x04\x05\x01\x12\x03c\x08\x13\n\x0c\n\x04\x04\x05\x08\0\x12\x04d\
    \x04g\x05\n\x0c\n\x05\x04\x05\x08\0\x01\x12\x03d\n\r\n\x0b\n\x04\x04\x05\
    \x02\0\x12\x03e\t(\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03e\t\x1b\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03e\x1c#\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x03e&'\n\x0b\n\x04\x04\x05\x02\x01\x12\x03f\t(\n\x0c\n\x05\x04\x05\x02\
    \x01\x06\x12\x03f\t\x17\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03f\x18#\n\
    \x0c\n\x05\x04\x05\x02\x01\x03\x12\x03f&'\n\n\n\x02\x04\x06\x12\x04j\0n\
    \x01\n\n\n\x03\x04\x06\x01\x12\x03j\x08\x10\n\x0b\n\x04\x04\x06\x02\0\
    \x12\x03k\x04\x1a\n\r\n\x05\x04\x06\x02\0\x04\x12\x04k\x04j\x12\n\x0c\n\
    \x05\x04\x06\x02\0\x05\x12\x03k\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\
    \x03k\n\x15\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x03k\x18\x19\n\x0b\n\x04\
    \x04\x06\x02\x01\x12\x03l\x04\x1a\n\r\n\x05\x04\x06\x02\x01\x04\x12\x04l\
    \x04k\x1a\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03l\x04\t\n\x0c\n\x05\x04\
    \x06\x02\x01\x01\x12\x03l\n\x15\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03l\
    \x18\x19\n\x0b\n\x04\x04\x06\x02\x02\x12\x03m\x04\x16\n\r\n\x05\x04\x06\
    \x02\x02\x04\x12\x04m\x04l\x1a\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03m\
    \x04\t\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03m\n\x11\n\x0c\n\x05\x04\
    \x06\x02\x02\x03\x12\x03m\x14\x15\n\n\n\x02\x04\x07\x12\x04p\0r\x01\n\n\
    \n\x03\x04\x07\x01\x12\x03p\x08\x0f\n\x0b\n\x04\x04\x07\x02\0\x12\x03q\
    \x04%\n\x0c\n\x05\x04\x07\x02\0\x04\x12\x03q\x04\x0c\n\x0c\n\x05\x04\x07\
    \x02\0\x06\x12\x03q\r\x15\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03q\x16\x1f\
    \n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03q#$b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
