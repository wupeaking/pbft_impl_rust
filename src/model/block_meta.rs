// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `block_meta.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct BlockMeta {
    // message fields
    pub block_height: u64,
    pub cur_verfier: ::protobuf::SingularPtrField<super::consensus::verifier>,
    pub verifier_no: u32,
    pub verifiers: ::protobuf::RepeatedField<super::consensus::verifier>,
    pub last_view: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockMeta {
    fn default() -> &'a BlockMeta {
        <BlockMeta as ::protobuf::Message>::default_instance()
    }
}

impl BlockMeta {
    pub fn new() -> BlockMeta {
        ::std::default::Default::default()
    }

    // uint64 block_height = 1;


    pub fn get_block_height(&self) -> u64 {
        self.block_height
    }
    pub fn clear_block_height(&mut self) {
        self.block_height = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_height(&mut self, v: u64) {
        self.block_height = v;
    }

    // .verifier cur_verfier = 2;


    pub fn get_cur_verfier(&self) -> &super::consensus::verifier {
        self.cur_verfier.as_ref().unwrap_or_else(|| <super::consensus::verifier as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cur_verfier(&mut self) {
        self.cur_verfier.clear();
    }

    pub fn has_cur_verfier(&self) -> bool {
        self.cur_verfier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cur_verfier(&mut self, v: super::consensus::verifier) {
        self.cur_verfier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cur_verfier(&mut self) -> &mut super::consensus::verifier {
        if self.cur_verfier.is_none() {
            self.cur_verfier.set_default();
        }
        self.cur_verfier.as_mut().unwrap()
    }

    // Take field
    pub fn take_cur_verfier(&mut self) -> super::consensus::verifier {
        self.cur_verfier.take().unwrap_or_else(|| super::consensus::verifier::new())
    }

    // uint32 verifier_no = 3;


    pub fn get_verifier_no(&self) -> u32 {
        self.verifier_no
    }
    pub fn clear_verifier_no(&mut self) {
        self.verifier_no = 0;
    }

    // Param is passed by value, moved
    pub fn set_verifier_no(&mut self, v: u32) {
        self.verifier_no = v;
    }

    // repeated .verifier verifiers = 4;


    pub fn get_verifiers(&self) -> &[super::consensus::verifier] {
        &self.verifiers
    }
    pub fn clear_verifiers(&mut self) {
        self.verifiers.clear();
    }

    // Param is passed by value, moved
    pub fn set_verifiers(&mut self, v: ::protobuf::RepeatedField<super::consensus::verifier>) {
        self.verifiers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verifiers(&mut self) -> &mut ::protobuf::RepeatedField<super::consensus::verifier> {
        &mut self.verifiers
    }

    // Take field
    pub fn take_verifiers(&mut self) -> ::protobuf::RepeatedField<super::consensus::verifier> {
        ::std::mem::replace(&mut self.verifiers, ::protobuf::RepeatedField::new())
    }

    // uint64 last_view = 5;


    pub fn get_last_view(&self) -> u64 {
        self.last_view
    }
    pub fn clear_last_view(&mut self) {
        self.last_view = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_view(&mut self, v: u64) {
        self.last_view = v;
    }
}

impl ::protobuf::Message for BlockMeta {
    fn is_initialized(&self) -> bool {
        for v in &self.cur_verfier {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.verifiers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_height = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cur_verfier)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.verifier_no = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.verifiers)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_view = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.block_height, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.cur_verfier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.verifier_no != 0 {
            my_size += ::protobuf::rt::value_size(3, self.verifier_no, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.verifiers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.last_view != 0 {
            my_size += ::protobuf::rt::value_size(5, self.last_view, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.block_height != 0 {
            os.write_uint64(1, self.block_height)?;
        }
        if let Some(ref v) = self.cur_verfier.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.verifier_no != 0 {
            os.write_uint32(3, self.verifier_no)?;
        }
        for v in &self.verifiers {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.last_view != 0 {
            os.write_uint64(5, self.last_view)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockMeta {
        BlockMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_height",
                |m: &BlockMeta| { &m.block_height },
                |m: &mut BlockMeta| { &mut m.block_height },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::consensus::verifier>>(
                "cur_verfier",
                |m: &BlockMeta| { &m.cur_verfier },
                |m: &mut BlockMeta| { &mut m.cur_verfier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "verifier_no",
                |m: &BlockMeta| { &m.verifier_no },
                |m: &mut BlockMeta| { &mut m.verifier_no },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::consensus::verifier>>(
                "verifiers",
                |m: &BlockMeta| { &m.verifiers },
                |m: &mut BlockMeta| { &mut m.verifiers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_view",
                |m: &BlockMeta| { &m.last_view },
                |m: &mut BlockMeta| { &mut m.last_view },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockMeta>(
                "BlockMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockMeta {
        static instance: ::protobuf::rt::LazyV2<BlockMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockMeta::new)
    }
}

impl ::protobuf::Clear for BlockMeta {
    fn clear(&mut self) {
        self.block_height = 0;
        self.cur_verfier.clear();
        self.verifier_no = 0;
        self.verifiers.clear();
        self.last_view = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockRequest {
    // message fields
    pub block_num: i64,
    pub request_type: BlockRequestType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockRequest {
    fn default() -> &'a BlockRequest {
        <BlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl BlockRequest {
    pub fn new() -> BlockRequest {
        ::std::default::Default::default()
    }

    // int64 block_num = 1;


    pub fn get_block_num(&self) -> i64 {
        self.block_num
    }
    pub fn clear_block_num(&mut self) {
        self.block_num = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_num(&mut self, v: i64) {
        self.block_num = v;
    }

    // .BlockRequestType request_type = 2;


    pub fn get_request_type(&self) -> BlockRequestType {
        self.request_type
    }
    pub fn clear_request_type(&mut self) {
        self.request_type = BlockRequestType::default_type;
    }

    // Param is passed by value, moved
    pub fn set_request_type(&mut self, v: BlockRequestType) {
        self.request_type = v;
    }
}

impl ::protobuf::Message for BlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.block_num = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.request_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.block_num != 0 {
            my_size += ::protobuf::rt::value_size(1, self.block_num, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request_type != BlockRequestType::default_type {
            my_size += ::protobuf::rt::enum_size(2, self.request_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.block_num != 0 {
            os.write_int64(1, self.block_num)?;
        }
        if self.request_type != BlockRequestType::default_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.request_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockRequest {
        BlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "block_num",
                |m: &BlockRequest| { &m.block_num },
                |m: &mut BlockRequest| { &mut m.block_num },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BlockRequestType>>(
                "request_type",
                |m: &BlockRequest| { &m.request_type },
                |m: &mut BlockRequest| { &mut m.request_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockRequest>(
                "BlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockRequest {
        static instance: ::protobuf::rt::LazyV2<BlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockRequest::new)
    }
}

impl ::protobuf::Clear for BlockRequest {
    fn clear(&mut self) {
        self.block_num = 0;
        self.request_type = BlockRequestType::default_type;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockResponse {
    // message fields
    pub request_type: BlockRequestType,
    pub block: ::protobuf::SingularPtrField<super::consensus::PbftBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockResponse {
    fn default() -> &'a BlockResponse {
        <BlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl BlockResponse {
    pub fn new() -> BlockResponse {
        ::std::default::Default::default()
    }

    // .BlockRequestType request_type = 2;


    pub fn get_request_type(&self) -> BlockRequestType {
        self.request_type
    }
    pub fn clear_request_type(&mut self) {
        self.request_type = BlockRequestType::default_type;
    }

    // Param is passed by value, moved
    pub fn set_request_type(&mut self, v: BlockRequestType) {
        self.request_type = v;
    }

    // .PbftBlock block = 3;


    pub fn get_block(&self) -> &super::consensus::PbftBlock {
        self.block.as_ref().unwrap_or_else(|| <super::consensus::PbftBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: super::consensus::PbftBlock) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut super::consensus::PbftBlock {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> super::consensus::PbftBlock {
        self.block.take().unwrap_or_else(|| super::consensus::PbftBlock::new())
    }
}

impl ::protobuf::Message for BlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.request_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_type != BlockRequestType::default_type {
            my_size += ::protobuf::rt::enum_size(2, self.request_type);
        }
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_type != BlockRequestType::default_type {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.request_type))?;
        }
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockResponse {
        BlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<BlockRequestType>>(
                "request_type",
                |m: &BlockResponse| { &m.request_type },
                |m: &mut BlockResponse| { &mut m.request_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::consensus::PbftBlock>>(
                "block",
                |m: &BlockResponse| { &m.block },
                |m: &mut BlockResponse| { &mut m.block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockResponse>(
                "BlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockResponse {
        static instance: ::protobuf::rt::LazyV2<BlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockResponse::new)
    }
}

impl ::protobuf::Clear for BlockResponse {
    fn clear(&mut self) {
        self.request_type = BlockRequestType::default_type;
        self.block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BlockRequestType {
    default_type = 0,
    only_header = 1,
    whole_content = 2,
}

impl ::protobuf::ProtobufEnum for BlockRequestType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BlockRequestType> {
        match value {
            0 => ::std::option::Option::Some(BlockRequestType::default_type),
            1 => ::std::option::Option::Some(BlockRequestType::only_header),
            2 => ::std::option::Option::Some(BlockRequestType::whole_content),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BlockRequestType] = &[
            BlockRequestType::default_type,
            BlockRequestType::only_header,
            BlockRequestType::whole_content,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BlockRequestType>("BlockRequestType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BlockRequestType {
}

impl ::std::default::Default for BlockRequestType {
    fn default() -> Self {
        BlockRequestType::default_type
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRequestType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum BroadcastMsgType {
    unknown_msg = 0,
    send_pbft_msg = 1,
    send_block_meta = 2,
    send_tx = 10,
    request_load_block = 20,
    send_specific_block = 21,
}

impl ::protobuf::ProtobufEnum for BroadcastMsgType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<BroadcastMsgType> {
        match value {
            0 => ::std::option::Option::Some(BroadcastMsgType::unknown_msg),
            1 => ::std::option::Option::Some(BroadcastMsgType::send_pbft_msg),
            2 => ::std::option::Option::Some(BroadcastMsgType::send_block_meta),
            10 => ::std::option::Option::Some(BroadcastMsgType::send_tx),
            20 => ::std::option::Option::Some(BroadcastMsgType::request_load_block),
            21 => ::std::option::Option::Some(BroadcastMsgType::send_specific_block),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [BroadcastMsgType] = &[
            BroadcastMsgType::unknown_msg,
            BroadcastMsgType::send_pbft_msg,
            BroadcastMsgType::send_block_meta,
            BroadcastMsgType::send_tx,
            BroadcastMsgType::request_load_block,
            BroadcastMsgType::send_specific_block,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<BroadcastMsgType>("BroadcastMsgType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for BroadcastMsgType {
}

impl ::std::default::Default for BroadcastMsgType {
    fn default() -> Self {
        BroadcastMsgType::unknown_msg
    }
}

impl ::protobuf::reflect::ProtobufValue for BroadcastMsgType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10block_meta.proto\x1a\x0fconsensus.proto\"\xc1\x01\n\tBlockMeta\x12\
    !\n\x0cblock_height\x18\x01\x20\x01(\x04R\x0bblockHeight\x12*\n\x0bcur_v\
    erfier\x18\x02\x20\x01(\x0b2\t.verifierR\ncurVerfier\x12\x1f\n\x0bverifi\
    er_no\x18\x03\x20\x01(\rR\nverifierNo\x12'\n\tverifiers\x18\x04\x20\x03(\
    \x0b2\t.verifierR\tverifiers\x12\x1b\n\tlast_view\x18\x05\x20\x01(\x04R\
    \x08lastView\"a\n\x0cBlockRequest\x12\x1b\n\tblock_num\x18\x01\x20\x01(\
    \x03R\x08blockNum\x124\n\x0crequest_type\x18\x02\x20\x01(\x0e2\x11.Block\
    RequestTypeR\x0brequestType\"g\n\rBlockResponse\x124\n\x0crequest_type\
    \x18\x02\x20\x01(\x0e2\x11.BlockRequestTypeR\x0brequestType\x12\x20\n\
    \x05block\x18\x03\x20\x01(\x0b2\n.PbftBlockR\x05block*H\n\x10BlockReques\
    tType\x12\x10\n\x0cdefault_type\x10\0\x12\x0f\n\x0bonly_header\x10\x01\
    \x12\x11\n\rwhole_content\x10\x02*\x89\x01\n\x10BroadcastMsgType\x12\x0f\
    \n\x0bunknown_msg\x10\0\x12\x11\n\rsend_pbft_msg\x10\x01\x12\x13\n\x0fse\
    nd_block_meta\x10\x02\x12\x0b\n\x07send_tx\x10\n\x12\x16\n\x12request_lo\
    ad_block\x10\x14\x12\x17\n\x13send_specific_block\x10\x15B\x13\n\x05mode\
    lP\x01Z\x08./;modelJ\x95\n\n\x06\x12\x04\0\0,\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\n\x12\x03\x02\
    \0\"\n\x08\n\x01\x08\x12\x03\x03\0\x1e\n\t\n\x02\x08\x01\x12\x03\x03\0\
    \x1e\n\x08\n\x01\x08\x12\x03\x04\0\x1f\n\t\n\x02\x08\x0b\x12\x03\x04\0\
    \x1f\n\t\n\x02\x03\0\x12\x03\x06\x07\x18\n\n\n\x02\x04\0\x12\x04\t\0\x0f\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\t\x08\x11\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\n\x04\x1c\n\r\n\x05\x04\0\x02\0\x04\x12\x04\n\x04\t\x13\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\n\
    \x0b\x17\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x1a\x1b\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x0b\x04\x1d\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x0b\x04\
    \n\x1c\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x0b\x04\x0c\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x0b\r\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x0b\x1b\x1c\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0c\x04\x1b\n\r\n\x05\x04\
    \0\x02\x02\x04\x12\x04\x0c\x04\x0b\x1d\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x0c\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0c\x0b\x16\n\x0c\n\
    \x05\x04\0\x02\x02\x03\x12\x03\x0c\x19\x1a\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\r\x04$\n\x0c\n\x05\x04\0\x02\x03\x04\x12\x03\r\x04\x0c\n\x0c\n\x05\
    \x04\0\x02\x03\x06\x12\x03\r\r\x15\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\
    \r\x16\x1f\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\r\"#\n\x0b\n\x04\x04\0\
    \x02\x04\x12\x03\x0e\x04\x19\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x0e\x04\
    \r$\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x0e\x04\n\n\x0c\n\x05\x04\0\
    \x02\x04\x01\x12\x03\x0e\x0b\x14\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\
    \x0e\x17\x18\n\n\n\x02\x05\0\x12\x04\x11\0\x15\x01\n\n\n\x03\x05\0\x01\
    \x12\x03\x11\x05\x15\n\x0b\n\x04\x05\0\x02\0\x12\x03\x12\x04\x15\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x12\x04\x10\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x12\x13\x14\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x13\x04\x14\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x13\x04\x0f\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x13\x12\x13\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x14\x04\x16\n\x0c\
    \n\x05\x05\0\x02\x02\x01\x12\x03\x14\x04\x11\n\x0c\n\x05\x05\0\x02\x02\
    \x02\x12\x03\x14\x14\x15\n\n\n\x02\x04\x01\x12\x04\x17\0\x1a\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x17\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x18\x04\x18\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x18\x04\x17\x16\n\x0c\n\
    \x05\x04\x01\x02\0\x05\x12\x03\x18\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x18\n\x13\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x16\x17\n\
    \x0b\n\x04\x04\x01\x02\x01\x12\x03\x19\x04&\n\r\n\x05\x04\x01\x02\x01\
    \x04\x12\x04\x19\x04\x18\x18\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x19\
    \x04\x14\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x19\x15!\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x19$%\n\n\n\x02\x04\x02\x12\x04\x1c\0\x1f\
    \x01\n\n\n\x03\x04\x02\x01\x12\x03\x1c\x08\x15\n\x0b\n\x04\x04\x02\x02\0\
    \x12\x03\x1d\x04&\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1d\x04\x1c\x16\n\
    \x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1d\x04\x14\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x1d\x15!\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1d$%\n\
    \x0b\n\x04\x04\x02\x02\x01\x12\x03\x1e\x04\x18\n\r\n\x05\x04\x02\x02\x01\
    \x04\x12\x04\x1e\x04\x1d&\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\x1e\
    \x04\r\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1e\x0e\x13\n\x0c\n\x05\
    \x04\x02\x02\x01\x03\x12\x03\x1e\x16\x17\n\n\n\x02\x05\x01\x12\x04!\0,\
    \x01\n\n\n\x03\x05\x01\x01\x12\x03!\x05\x15\n\x0b\n\x04\x05\x01\x02\0\
    \x12\x03\"\x04\x14\n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03\"\x04\x0f\n\x0c\
    \n\x05\x05\x01\x02\0\x02\x12\x03\"\x12\x13\n\x1b\n\x04\x05\x01\x02\x01\
    \x12\x03$\x04\x16\x1a\x0e\x20\xe5\x85\xb1\xe8\xaf\x86\xe7\x9b\xb8\xe5\
    \x85\xb3\n\n\x0c\n\x05\x05\x01\x02\x01\x01\x12\x03$\x04\x11\n\x0c\n\x05\
    \x05\x01\x02\x01\x02\x12\x03$\x14\x15\n\x0b\n\x04\x05\x01\x02\x02\x12\
    \x03%\x04\x18\n\x0c\n\x05\x05\x01\x02\x02\x01\x12\x03%\x04\x13\n\x0c\n\
    \x05\x05\x01\x02\x02\x02\x12\x03%\x16\x17\nH\n\x04\x05\x01\x02\x03\x12\
    \x03'\x04\x11\x1a\x04\x20tx\n\"5\x20\xe6\x84\x8f\xe5\x91\xb3\xe7\x9d\x80\
    \xe6\x8e\xa5\xe6\x94\xb6\xe5\x88\xb0\xe4\xbb\x8e\xe5\x85\xb6\xe4\xbb\x96\
    \xe8\x8a\x82\xe7\x82\xb9\xe5\x8f\x91\xe8\xbf\x87\xe6\x9d\xa5\xe7\x9a\x84\
    \xe4\xba\xa4\xe6\x98\x93\n\n\x0c\n\x05\x05\x01\x02\x03\x01\x12\x03'\x04\
    \x0b\n\x0c\n\x05\x05\x01\x02\x03\x02\x12\x03'\x0e\x10\n\x19\n\x04\x05\
    \x01\x02\x04\x12\x03*\x04\x1c\x1a\x0c\x20blockchain\n\n\x0c\n\x05\x05\
    \x01\x02\x04\x01\x12\x03*\x04\x16\n\x0c\n\x05\x05\x01\x02\x04\x02\x12\
    \x03*\x19\x1b\n\x0b\n\x04\x05\x01\x02\x05\x12\x03+\x04\x1d\n\x0c\n\x05\
    \x05\x01\x02\x05\x01\x12\x03+\x04\x17\n\x0c\n\x05\x05\x01\x02\x05\x02\
    \x12\x03+\x1a\x1cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
